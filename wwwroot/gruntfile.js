/*
This file in the main entry point for defining grunt tasks and using grunt plugins.
Click here to learn more. http://go.microsoft.com/fwlink/?LinkID=513275&clcid=0x409
*/
'use strict';

module.exports = function (grunt) {
    var sourceFiles = ['**/*.js', '!wwwroot/**/*.js', '!node_modules/**/*.js', '!bower_components/**/*.js'];

    var filesToCopy = ['**/*.html', 'fonts/**/*.*', 'styles/**/*.*', 'jspm_packages/**/*.*', 'node_modules/**/*.*', 'bower_components/**/*.*'];

    var outputRoot = "../wwwroot/";

    grunt.initConfig({});

    var chokidar = require('chokidar');
    var babel = require('babel');
    var babelOptions = {
        sourceRoot: './',
        sourceMaps: 'inline',
        optional: ["es7.decorators"]
    };

    grunt.registerTask("watch", "", function () {
        var done = this.async();
        grunt.log.writeln("Starting watch...");
        var watcher = chokidar.watch('.', {
            persistent: true,
            ignored: 'wwwroot/**/*',
            ignoreInitial: true
        });
        grunt.log.writeln("Watching");

        function handleSourceFile(path) {
            grunt.log.writeln("Handling : " + path);
            var fileContent = grunt.file.read(path);
            try {
                babelOptions.sourceFileName = path;
                var transformed = babel.transform(fileContent, babelOptions);
                grunt.file.write(outputRoot + path, transformed.code);
                grunt.log.writeln("Handled : " + path);
            } catch (ex) {
                grunt.log.writeln("Error : " + ex);
            }
        }

        function handleCopyingFile(path) {
            grunt.log.writeln("Copy : " + path);
            grunt.file.copy(path, outputRoot + path);
            grunt.log.writeln("Copied : " + path);
        }

        function newOrChanged(path) {
            if (grunt.file.isMatch(sourceFiles, path)) handleSourceFile(path);
            if (grunt.file.isMatch(filesToCopy, path)) handleCopyingFile(path);
        }

        function deleted(path) {
            grunt.log.writeln("Delete : " + path);
            grunt.file['delete'](outputRoot + path);
            grunt.log.writeln("Deleted : " + path);
        }

        watcher.on("add", newOrChanged).on("change", newOrChanged).on("unlink", deleted);
    });

    grunt.registerTask('monitor', ['watch']);
};
//# sourceMappingURL=data:application/json;base64,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QyxJQUFJLENBQUMsT0FBTyxDQUFDLFdBQVcsRUFBRSxJQUFJLENBQUMsRUFBRSxpQkFBaUIsQ0FBQyxJQUFJLENBQUMsQ0FBQztTQUN0RTs7QUFFRCxpQkFBUyxPQUFPLENBQUMsSUFBSSxFQUFFO0FBQ25CLGlCQUFLLENBQUMsR0FBRyxDQUFDLE9BQU8sQ0FBQyxXQUFXLEdBQUcsSUFBSSxDQUFDLENBQUM7QUFDdEMsaUJBQUssQ0FBQyxJQUFJLFVBQU8sQ0FBQyxVQUFVLEdBQUcsSUFBSSxDQUFDLENBQUM7QUFDckMsaUJBQUssQ0FBQyxHQUFHLENBQUMsT0FBTyxDQUFDLFlBQVksR0FBRyxJQUFJLENBQUMsQ0FBQztTQUMxQzs7QUFFRCxlQUFPLENBQ0YsRUFBRSxDQUFDLEtBQUssRUFBRSxZQUFZLENBQUMsQ0FDdkIsRUFBRSxDQUFDLFFBQVEsRUFBRSxZQUFZLENBQUMsQ0FDMUIsRUFBRSxDQUFDLFFBQVEsRUFBRSxPQUFPLENBQUMsQ0FBQztLQUM5QixDQUFDLENBQUM7O0FBRUgsU0FBSyxDQUFDLFlBQVksQ0FBQyxTQUFTLEVBQUUsQ0FBQyxPQUFPLENBQUMsQ0FBQyxDQUFDO0NBQzVDLENBQUMiLCJmaWxlIjoidW5rbm93biIsInNvdXJjZVJvb3QiOiIuLyIsInNvdXJjZXNDb250ZW50IjpbIi8qXG5UaGlzIGZpbGUgaW4gdGhlIG1haW4gZW50cnkgcG9pbnQgZm9yIGRlZmluaW5nIGdydW50IHRhc2tzIGFuZCB1c2luZyBncnVudCBwbHVnaW5zLlxuQ2xpY2sgaGVyZSB0byBsZWFybiBtb3JlLiBodHRwOi8vZ28ubWljcm9zb2Z0LmNvbS9md2xpbmsvP0xpbmtJRD01MTMyNzUmY2xjaWQ9MHg0MDlcbiovXG5tb2R1bGUuZXhwb3J0cyA9IGZ1bmN0aW9uIChncnVudCkge1xuICAgIHZhciBzb3VyY2VGaWxlcyA9IFtcbiAgICAgICAgJyoqLyouanMnLFxuICAgICAgICAnIXd3d3Jvb3QvKiovKi5qcycsXG4gICAgICAgICchbm9kZV9tb2R1bGVzLyoqLyouanMnLFxuICAgICAgICAnIWJvd2VyX2NvbXBvbmVudHMvKiovKi5qcydcbiAgICBdO1xuIFxuICAgIHZhciBmaWxlc1RvQ29weSA9IFtcbiAgICAgICAgJyoqLyouaHRtbCcsXG4gICAgICAgICdmb250cy8qKi8qLionLFxuICAgICAgICAnc3R5bGVzLyoqLyouKicsXG4gICAgICAgICdqc3BtX3BhY2thZ2VzLyoqLyouKicsXG4gICAgICAgICdub2RlX21vZHVsZXMvKiovKi4qJyxcbiAgICAgICAgJ2Jvd2VyX2NvbXBvbmVudHMvKiovKi4qJ1xuICAgIF07XG4gICAgXG4gICAgdmFyIG91dHB1dFJvb3QgPSBcIi4uL3d3d3Jvb3QvXCI7XG4gXG4gICAgZ3J1bnQuaW5pdENvbmZpZyh7XG4gICAgfSk7XG4gXG4gXG4gICAgdmFyIGNob2tpZGFyID0gcmVxdWlyZSgnY2hva2lkYXInKTtcbiAgICB2YXIgYmFiZWwgPSByZXF1aXJlKCdiYWJlbCcpO1xuICAgIHZhciBiYWJlbE9wdGlvbnMgPSB7XG4gICAgICAgIHNvdXJjZVJvb3Q6ICcuLycsXG4gICAgICAgIHNvdXJjZU1hcHM6ICdpbmxpbmUnLFxuICAgICAgICBvcHRpb25hbDogW1xuICAgICAgICAgICAgXCJlczcuZGVjb3JhdG9yc1wiXG4gICAgICAgIF1cbiAgICB9O1xuIFxuICAgIGdydW50LnJlZ2lzdGVyVGFzayhcIndhdGNoXCIsIFwiXCIsIGZ1bmN0aW9uICgpIHtcbiAgICAgICAgdmFyIGRvbmUgPSB0aGlzLmFzeW5jKCk7XG4gICAgICAgIGdydW50LmxvZy53cml0ZWxuKFwiU3RhcnRpbmcgd2F0Y2guLi5cIik7XG4gICAgICAgIHZhciB3YXRjaGVyID0gY2hva2lkYXIud2F0Y2goJy4nLCB7XG4gICAgICAgICAgICBwZXJzaXN0ZW50OiB0cnVlLFxuICAgICAgICAgICAgaWdub3JlZDogJ3d3d3Jvb3QvKiovKicsXG4gICAgICAgICAgICBpZ25vcmVJbml0aWFsOiB0cnVlXG4gICAgICAgIH0pO1xuICAgICAgICBncnVudC5sb2cud3JpdGVsbihcIldhdGNoaW5nXCIpO1xuIFxuICAgICAgICBmdW5jdGlvbiBoYW5kbGVTb3VyY2VGaWxlKHBhdGgpIHtcbiAgICAgICAgICAgIGdydW50LmxvZy53cml0ZWxuKFwiSGFuZGxpbmcgOiBcIiArIHBhdGgpO1xuICAgICAgICAgICAgdmFyIGZpbGVDb250ZW50ID0gZ3J1bnQuZmlsZS5yZWFkKHBhdGgpO1xuICAgICAgICAgICAgdHJ5IHtcbiAgICAgICAgICAgICAgICBiYWJlbE9wdGlvbnMuc291cmNlRmlsZU5hbWUgPSBwYXRoO1xuICAgICAgICAgICAgICAgIHZhciB0cmFuc2Zvcm1lZCA9IGJhYmVsLnRyYW5zZm9ybShmaWxlQ29udGVudCwgYmFiZWxPcHRpb25zKTtcbiAgICAgICAgICAgICAgICBncnVudC5maWxlLndyaXRlKG91dHB1dFJvb3QgKyBwYXRoLCB0cmFuc2Zvcm1lZC5jb2RlKTtcbiAgICAgICAgICAgICAgICBncnVudC5sb2cud3JpdGVsbihcIkhhbmRsZWQgOiBcIiArIHBhdGgpO1xuICAgICAgICAgICAgfSBjYXRjaCAoZXgpIHtcbiAgICAgICAgICAgICAgICBncnVudC5sb2cud3JpdGVsbihcIkVycm9yIDogXCIgKyBleCk7XG4gICAgICAgICAgICB9XG4gICAgICAgIH1cbiBcbiAgICAgICAgZnVuY3Rpb24gaGFuZGxlQ29weWluZ0ZpbGUocGF0aCkge1xuICAgICAgICAgICAgZ3J1bnQubG9nLndyaXRlbG4oXCJDb3B5IDogXCIgKyBwYXRoKTtcbiAgICAgICAgICAgIGdydW50LmZpbGUuY29weShwYXRoLCBvdXRwdXRSb290ICsgcGF0aCk7XG4gICAgICAgICAgICBncnVudC5sb2cud3JpdGVsbihcIkNvcGllZCA6IFwiICsgcGF0aCk7XG4gICAgICAgIH1cbiBcbiAgICAgICAgZnVuY3Rpb24gbmV3T3JDaGFuZ2VkKHBhdGgpIHtcbiAgICAgICAgICAgIGlmIChncnVudC5maWxlLmlzTWF0Y2goc291cmNlRmlsZXMsIHBhdGgpKSBoYW5kbGVTb3VyY2VGaWxlKHBhdGgpO1xuICAgICAgICAgICAgaWYgKGdydW50LmZpbGUuaXNNYXRjaChmaWxlc1RvQ29weSwgcGF0aCkpIGhhbmRsZUNvcHlpbmdGaWxlKHBhdGgpO1xuICAgICAgICB9XG4gXG4gICAgICAgIGZ1bmN0aW9uIGRlbGV0ZWQocGF0aCkge1xuICAgICAgICAgICAgZ3J1bnQubG9nLndyaXRlbG4oXCJEZWxldGUgOiBcIiArIHBhdGgpO1xuICAgICAgICAgICAgZ3J1bnQuZmlsZS5kZWxldGUob3V0cHV0Um9vdCArIHBhdGgpO1xuICAgICAgICAgICAgZ3J1bnQubG9nLndyaXRlbG4oXCJEZWxldGVkIDogXCIgKyBwYXRoKTtcbiAgICAgICAgfVxuIFxuICAgICAgICB3YXRjaGVyXG4gICAgICAgICAgICAub24oXCJhZGRcIiwgbmV3T3JDaGFuZ2VkKVxuICAgICAgICAgICAgLm9uKFwiY2hhbmdlXCIsIG5ld09yQ2hhbmdlZClcbiAgICAgICAgICAgIC5vbihcInVubGlua1wiLCBkZWxldGVkKTtcbiAgICB9KTtcbiBcbiAgICBncnVudC5yZWdpc3RlclRhc2soJ21vbml0b3InLCBbJ3dhdGNoJ10pO1xufTsiXX0=